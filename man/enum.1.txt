ENUM(1)
=======
:man source:   enum {enumversion}
:man manual:   enum {enumversion}


NAME
----

enum - seq- and jot-like enumerator


SYNOPSIS
--------

GENERAL
~~~~~~~

*enum* [ 'OPTIONS' ]  'LEFT' ".." 'COUNT'"x" 'STEP' ".." 'RIGHT'


SHORTCUTS
~~~~~~~~~

*enum* [ 'OPTIONS' ]  'LEFT'  'STEP'  'RIGHT'

*enum* [ 'OPTIONS' ]  'LEFT'        'RIGHT'

*enum* [ 'OPTIONS' ]              'RIGHT'

...


DESCRIPTION
-----------

*enum* enumerates values (numbers) from 'LEFT' to 'RIGHT'
adding/subtracting 'STEP' each time.  If 'STEP' is not provided it is
implied. No more than 'COUNT' values are printed.  Before printing,
values are passed through a formatter.  Please see 'OPTIONS' for
details on controlling the formatter or 'EXAMPLES' for use cases.


EXAMPLES
--------

Use in for-loops
~~~~~~~~~~~~~~~~

    for i in $(enum 1 3); do
        touch file_${i}
    done


Use for random numbers
~~~~~~~~~~~~~~~~~~~~~~

    number=$(enum --random 3 .. 10)

instead of native Bash like

    f() { min=$1; max=$2; echo $((RANDOM * (max - min + 1) / 32767 + min)); }
    number=$(f 3 10)


Showing an ASCII table
~~~~~~~~~~~~~~~~~~~~~~

    enum -f '[%3i] "%c"' 0 127


OPTIONS
-------

MODES
~~~~~

*-r, --random*::
    Produces random numbers instead of monotone sequences,
    potentially with duplicates.

FORMATTING
~~~~~~~~~~

*-b, --dumb*='TEXT'::
    Overrides the output format to 'TEXT' without interpolating
    placeholders.  For instance, *enum -b "foo % 10" 3x* produces
    the string "foo % 10" three times.

*-c, --characters*::
    Overrides the output format to `%c` producing characters.
    For example, *enum -c 65 67* produces the letters "A", "B" and "C".

*-f, --format*='FORMAT'::
    Overrides the default output format with 'FORMAT'.
    For details on allowed formats please see printf(3). +
    If 'FORMAT' does not contain any placeholders, enum will error out
    with code 1.  In contrast, jot would have appended the number's
    value instead.  To make numbers appear at the end, please adjust
    'FORMAT' accordingly with enum.

*-n, --omit-newline*::
    Omits the trailing newline from printing.

*-p, --precision*='COUNT'::
    Overrides automatic selection of precision to print 'COUNT'
    decimal places, e.g. "0.100" for 'COUNT' = 3.
    By default, the number of digits to print is computed from the
    arguments given and the potentially computed step size.

*-s, --separator*='TEXT'::
    Overrides the separator that is printed between values.
    By default, values are separated by a newline.

*-w, --word*='FORMAT'::
    Alias for --format.


OTHER
~~~~~

*-h, --help*::
    Outputs usage information and exits with code 0 (success).

*-V, --version*::
    Displays version information and exits with code 0 (success).


HISTORY
-------

*enum* is a fusion of GNU seq and jot, feature-wise.  At the core both
tools print sequences of numbers.  GNU seq has a clean interface but
very limited functionality.  jot on the other hand offers more
advanced features, like random numbers and custom formatting, at the
cost of a rather unfriendly interface.

With *enum* we try to offer a tool with the power of jot and and a
usable, easily memorable interface.  Enum is licensed under a BSD
license and written in C89 for maximum portability.


COMPARISON TO JOT
-----------------

Using *enum* instead of jot offers two main advantages:

- improved usability and
- uniform behavior across distributions and operating systems.

Still (as of 2010-10-03), jot implementations differ subtly among
DragonFlyBSD, FreeBSD, MirOS BSD, NetBSD, OpenBSD and OS X.  For
instance the command 'jot - 0 5' produces

- 6 integers from 0 to 5 on FreeBSD and OS X,

    0 1 2 3 4 5

- 100 integers from 0 to 99 on NetBSD, and

    0 1 2 [..] 97 98 99

- 100 integers from 0 to 5 (with consecutive duplicates) on
  DragonFlyBSD, MirOS BSD and OpenBSD.

    0 0 0 0 0 0 0 0 0 0 1 1 [..] 4 4 5 5 5 5 5 5 5 5 5 5

Basically, the full feature set of jot plus a few enhancements is
contained in *enum*.  Names of parameters have been retained for
increased compatibility, e.g. *-p 2* works with *enum* as it does with
jot:

    # jot -p 2 3
    1.00
    2.00
    3.00

    # enum -p 2 3
    1.00
    2.00
    3.00

Please see OPTIONS above for further details.


ADDITIONAL FEATURES
~~~~~~~~~~~~~~~~~~~

The features that *enum* offers over jot include:


More memorable command line usage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In order to produce 3 random numbers between 1 and 10 inclusively, you
would run

    # jot -r 3 1 10

with jot.  We find these alternative calls to *enum* more intuitive:

    # enum -r 1 .. 3x .. 10
    # enum -r 1 3x 10


Custom resolution of random
^^^^^^^^^^^^^^^^^^^^^^^^^^^
With *enum* you can specify the gap between possible random values.
These two cases illustrate the difference between a gap of 2 and 3:

    # enum -r 4 .. 100x 2 .. 10 | sort -u -n
    4
    6
    8
    10

    # enum -r 4 .. 100x 3 .. 10 | sort -u -n
    4
    7
    10


Support for several placeholders in format strings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
jot on DragonFlyBSD, FreeBSD, MirOS BSD, OpenBSD and OS X:

    # jot -w %g%g 3
    jot: too many conversions

jot on NetBSD:

    # jot -w %g%g 3
    jot: unknown or invalid format `%g%g'

*enum* on any platform:

    # enum -f %g%g 3
    11
    22
    33


DIFFERENCES
~~~~~~~~~~~

In contrast to jot, *enum* does not append the current value, if the
formatting string does not contain a placeholder.
Behavior of jot:

    # jot 3 -w test_
    test_1
    test_2
    test_3

Behavior of *enum*:

    # enum -w test_ 3
    test_
    test_
    test_

In order to achieve jot's output with *enum*, you could manually
append a placeholder:

    # enum -w test_%d 3
    test_1
    test_2
    test_3


COMPARISON TO GNU SEQ
---------------------

Basically, *enum*'s usage is backwards-compatible to that of GNU seq.


ADDITIONAL FEATURES
~~~~~~~~~~~~~~~~~~~

The features *enum* offers over GNU seq include:


Random number mode
^^^^^^^^^^^^^^^^^^
*enum* supports output of constrained random numbers, e.g.

    # enum -r 4 .. 3x 2.0 .. 11

produces three (possibly duplicate) random numbers
from the set {4.0, 6.0, 8.0, 10.0}.


Support for inverse ordering
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In contrast to GNU seq, *enum* supports enumerating decreasing values:

    # seq 3 1

    # enum 3 1
    3
    2
    1


Support for several placeholders in format strings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    # seq -f %g%g 3
    seq: format `%g%g' has too many % directives

    # enum -f %g%g 3
    11
    22
    33


Omitting final newline
^^^^^^^^^^^^^^^^^^^^^^
By specifying *-n* as a parameter, you can make *enum* omit the
trailing newline.


DIFFERENCES
~~~~~~~~~~~

*enum* does not (yet?) support GNU seq's parameter *--equal-width*.
On a side note, the related shortcut *-w* conflicts with jot's *-w
word*.

Also, while GNU seq is licensed under GPL v3 or later, *enum* is
licensed under the New BSD license.


AUTHORS
-------

Jan Hauke Rahm <jhr@debian.org>

Sebastian Pipping <sping@gentoo.org>


RESOURCES
---------
Main web site:  https://fedorahosted.org/enum/

Gitweb:  http://git.fedorahosted.org/git/?p=enum.git


SEE ALSO
--------
jot(1), seq(1), printf(3)
